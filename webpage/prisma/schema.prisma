// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Database schema version tracking
model DatabaseInfo {
  id          Int      @id @default(1)
  version     String
  updatedAt   DateTime @updatedAt
}

// User accounts for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // Hashed password
  firstName     String?
  lastName      String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  settings      UserSetting[]
  favorites     UserFavorite[]
  recentlyUsed  UserRecentlyUsed[]
  sessions      Session[]
}

// User Authentication Sessions
model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User settings
model UserSetting {
  id        String  @id @default(cuid())
  userId    String
  key       String
  value     String  // JSON string for setting values
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
}

// Prompts - Core and User created
model Prompt {
  id           String    @id
  title        String
  description  String?
  categoryId   String?
  promptText   String
  tags         PromptTag[]
  isUserCreated Boolean
  usageCount   Int       @default(0)
  createdAt    DateTime
  lastUsed     DateTime?
  lastEdited   DateTime?
  responses    Response[]
  favorites    Favorite[]
  userFavorites UserFavorite[]
  recentlyUsed RecentlyUsed[]
  userRecentlyUsed UserRecentlyUsed[]
}

// Categories - Core and User created
model Category {
  id            String  @id
  name          String
  isUserCreated Boolean @default(false)
}

// Tags
model Tag {
  id      String     @id @default(cuid())
  name    String     @unique
  prompts PromptTag[]
}

// Prompt-Tag junction table
model PromptTag {
  promptId String
  tagId    String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([promptId, tagId])
}

// Global Favorites (legacy, maintained for backward compatibility)
model Favorite {
  id       String @id @default(cuid())
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId])
}

// User-specific Favorites
model UserFavorite {
  id       String @id @default(cuid())
  userId   String
  promptId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
}

// Global Recently Used (legacy, maintained for backward compatibility)
model RecentlyUsed {
  id        String   @id @default(cuid())
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  usedAt    DateTime @default(now())

  @@index([usedAt])
}

// User-specific Recently Used
model UserRecentlyUsed {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  usedAt    DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([usedAt])
}

// AI Responses
model Response {
  id              String    @id
  promptId        String
  responseText    String
  modelUsed       String?
  promptTokens    Int?
  completionTokens Int?
  totalTokens     Int?
  createdAt       DateTime
  lastEdited      DateTime?
  variablesUsed   String?   // JSON string for variable values
  prompt          Prompt    @relation(fields: [promptId], references: [id], onDelete: Cascade)
}

// Global Settings (legacy, maintained for backward compatibility)
model Setting {
  key   String @id
  value String // JSON string for setting values
}