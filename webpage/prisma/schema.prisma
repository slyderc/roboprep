generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model DatabaseInfo {
  id        Int      @id @default(autoincrement())
  version   String
  updatedAt DateTime @updatedAt
}

model User {
  id           String             @id @default(cuid())
  email        String             @unique
  password     String
  firstName    String?
  lastName     String?
  isAdmin      Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  sessions     Session[]
  favorites    UserFavorite[]
  recentlyUsed UserRecentlyUsed[]
  settings     UserSetting[]
  responses    Response[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSetting {
  id     String @id @default(cuid())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}

model Prompt {
  id               String             @id
  title            String
  description      String?
  categoryId       String?
  promptText       String
  isUserCreated    Boolean
  usageCount       Int                @default(0)
  createdAt        DateTime
  lastUsed         DateTime?
  lastEdited       DateTime?
  tags             PromptTag[]
  responses        Response[]
  userFavorites    UserFavorite[]
  userRecentlyUsed UserRecentlyUsed[]
}

model Category {
  id            String  @id
  name          String
  isUserCreated Boolean @default(false)
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  prompts PromptTag[]
}

model PromptTag {
  promptId String
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@id([promptId, tagId])
}

model UserFavorite {
  id       String @id @default(cuid())
  userId   String
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
}

model UserRecentlyUsed {
  id       String   @id @default(cuid())
  userId   String
  promptId String
  usedAt   DateTime @default(now())
  prompt   Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([usedAt])
}

model Response {
  id               String    @id
  promptId         String
  userId           String?
  responseText     String
  modelUsed        String?
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  createdAt        DateTime
  lastEdited       DateTime?
  variablesUsed    String?
  prompt           Prompt    @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user             User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Setting {
  key   String @id
  value String
}
